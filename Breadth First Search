Graph.java
import java.util.*;
public class Graph {
private int V;
private LinkedList<Integer> adj[];
Graph(int v) {
V = v;
adj = new LinkedList[v];
for (int i = 0; i < v; ++i)
adj[i] = new LinkedList();
}
void addEdge(int v, int w) {
adj[v].add(w);
}
void BFS(int s) {
boolean visited[] = new boolean[V];
LinkedList<Integer> queue = new LinkedList();
visited[s] = true;
queue.add(s);
while (queue.size() != 0) {
s = queue.poll();
System.out.print(s + " ");
Iterator<Integer> i = adj[s].listIterator();
while (i.hasNext()) {
int n = i.next();
if (!visited[n]) {
visited[n] = true;
queue.add(n);
}
}
}
}
public static void main(String args[]) {
System.out.println("enter the number of vertices:");
Scanner a =new Scanner(System.in);
int v=a.nextInt();
System.out.println("enter the number of edges");
int e1=a.nextInt();
int u1,u2;
Graph g = new Graph(v);
System.out.println("u1:source vertices,u2:destination vertices");
for(int i=0;i<e1;i++)
{
System.out.println("enter u1:");
u1=a.nextInt();
System.out.println("enter u2:");
u2=a.nextInt();
g.addEdge(u1,u2);
}
System.out.println("Enter the starting position it must start");
int s1=a.nextInt();
System.out.println("Following is Breadth First Traversal " + "(starting from vertex 2)");
g.BFS(s1);
}
}
